
  <!-- SECTION 1 -->
  <section id="mc-section-1" class="mc-section-1 section" style="padding:20px 0px; 20px; 0px;">
      <div class="container">
        <div class="row">
          <div class="col-lg-6 table-responsive">
            <div id="search-list"></div>
          </div>
          <div class="col-lg-6">
            <div id="map"></div>
            <div id="infowindow-content">
              <img src="" width="16" height="16" id="place-icon">
              <span id="place-name" class="title"></span><br>
              <span id="place-address"></span>
            </div>
          </div>          
        </div>
      </div>
  </section>
  <!-- END / SECTION 1 -->

  <!-- Load jQuery & Other Scripts -->
  <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %>

  <script>
    var map;
    var markers = [];
    var infowindow;
    function initMap() {
      map = new google.maps.Map(document.getElementById("map"), {
        zoom: 10,
        center: new google.maps.LatLng(38.764590, -77.550688),
        mapTypeId: 'roadmap'
      });

      var input_address = document.getElementById("input_address");
      var autocomplete = new google.maps.places.Autocomplete(input_address);
      autocomplete.bindTo('bounds', map);

      var marker = new google.maps.Marker({
        map: map,
        icon: '/seeker.png',
        draggable: true,
        anchorPoint: new google.maps.Point(0, -29)
      });

      infowindow = new google.maps.InfoWindow();
      infowindowContent = document.getElementById('infowindow-content');
      infowindow.setContent(infowindowContent); 
      
      autocomplete.addListener('place_changed', function() {
        //infowindow.close();
        marker.setVisible(false);
        var place = autocomplete.getPlace();
        if (!place.geometry) {
          // User entered the name of a Place that was not suggested and
          // pressed the Enter key, or the Place Details request failed.
          window.alert("No details available for input: '" + place.name + "'");
          return;
        }
    
        // If the place has a geometry, then present it on a map.
        if (place.geometry.viewport) {
          map.fitBounds(place.geometry.viewport);
        } else {
          map.setCenter(place.geometry.location);
        }
        map.setZoom(10);
        marker.setPosition(place.geometry.location);
        marker.setVisible(true);

        infoWindowContentAutocomplete(place, infowindow, infowindowContent, marker);
        seekerMouseEvent(map, marker);

        //put cordinate into hidden form fields
        $("#input_latitude").val(place.geometry.location.lat());
        $("#input_longitude").val(place.geometry.location.lng());
      });      

      marker.addListener('click', function() {
        infowindow.open(map, marker);
      });

      // marker dragging
      marker.addListener('dragend', function(evt){
        infowindow.close();
        current_lat = evt.latLng.lat().toFixed(6);
        current_long = evt.latLng.lng().toFixed(6);
        map.setCenter(marker.position);
        marker.setMap(map);
        map.setZoom(10);
        //reverse geocode and resubmit
        getGeo(current_lat, current_long, map, marker, infowindow, function(geo_result){callbackInfowindowSubmit(geo_result)});
        //getAddress(current_lat, current_long, map, marker, infowindow);
      });
    };

    function callbackInfowindowSubmit(geo_result){
      lat = geo_result['lat'];
      lng = geo_result['lng'];
      map = geo_result['map'];
      marker = geo_result['marker'];
      infowindow = geo_result['infowindow'];
      placeid = geo_result['placeid'];
      address = geo_result['address'];
      $("#input_address").val(address);
      $("#input_latitude").val(lat);
      $("#input_longitude").val(lng);      
      infoWindowContentDrag(map, marker, infowindow, placeid);
      submitSearch();
    };

    function infoWindowContentAutocomplete(place, infowindow, infowindowContent, marker){
      var address = '';
      if (place.address_components) {
        address = [
          (place.address_components[0] && place.address_components[0].short_name || ''),
          (place.address_components[1] && place.address_components[1].short_name || ''),
          (place.address_components[2] && place.address_components[2].short_name || '')
        ].join(' ');
      };
      infowindowContent.children['place-icon'].src = place.icon;
      infowindowContent.children['place-name'].textContent = place.name;
      infowindowContent.children['place-address'].textContent = address;
      infowindow.open(map, marker);
    };

    function infoWindowContentDrag(map, marker, infowindow, placeid){
      var service = new google.maps.places.PlacesService(map);
      service.getDetails({
        placeId: placeid
      }, function(place, status) {
        if (status === google.maps.places.PlacesServiceStatus.OK) {
            marker.addListener('click', function() {
            infowindowContent = document.getElementById('infowindow-content');
            infowindowContent.children['place-icon'].src = '/seeker.png';
            infowindowContent.children['place-name'].textContent = place.name;
            infowindowContent.children['place-address'].textContent = place.formatted_address;
            infowindow.setContent(infowindowContent);
            infowindow.open(map, marker);
          });
        }
      });
    };

    $(document).ready(function() {
      $("#searchButton").click(function(){
        submitSearch();
      });
    });

    function submitSearch() {      
      var form_params = $("input[name^='input_']").serialize();
      $.ajax({
        type: "GET",
        url: "search_result",
        data: form_params,
        cache: false,
        dataType: "json",
        success: function(data) {
          //var infowindow = new google.maps.InfoWindow();
          //var infowindowContent = document.getElementById('infowindow-content');
          //infowindow.setContent(infowindowContent);
          renderMap(data);
          renderList(data);
        },
        error: function() {
          alert("Request Error! Please refresh the page.")
        }
      });
    };

    function renderMap(data){
      deleteMarkers();
      for (var i=0; i<data.length; i++){
        var dataRow = data[i];
        var dataCt = i+1;
        var marker = new google.maps.Marker({
          position: new google.maps.LatLng(dataRow.latitude,dataRow.longitude),
          icon: '/teacher.png',
          label: {
            text: dataCt.toString(),
            color: "#fff",
            fontWeight: "900"
          },
          map: map
        });
        if (i == 0 && infowindow == null) {
          infowindow = new google.maps.InfoWindow();
          infowindowContent = document.getElementById('infowindow-content');
          infowindow.setContent(infowindowContent);
        };
        infoWindowEvent(map, marker, dataRow.name, dataRow.address, infowindow);
        organizerMouseEvent(map, marker, dataCt);
        markers.push(marker);
      };
    };

    // infowindow for organizer
    function infoWindowEvent(map, marker, name, address, infowindow){
      marker.addListener('click', function() {
        infowindowContent = '<div id="infowindow-content"><img src="/teacher.png" width="16" height="16" id="place-icon"><span id="place-name" class="title">'+name+'</span><br><span id="place-address">'+address+'</span></div>';
        infowindow.setContent(infowindowContent);
        infowindow.open(map, marker);
      });
    };

    // organizer marker mouseover event
    function organizerMouseEvent(map, marker, dataCt){
      marker.addListener('mouseover', function() {
        $('#item_'+dataCt).addClass('search-item-highlite');
        markers[dataCt-1].setIcon('/teacher_light.png');
      });
      marker.addListener('mouseout', function() {
        $('#item_'+dataCt).removeClass('search-item-highlite');
        markers[dataCt-1].setIcon('/teacher.png');
      });
    };

    // seeker marker mouseover event
    function seekerMouseEvent(map, marker){
      marker.addListener('mouseover', function() {
        marker.setIcon('/seeker_light.png');
      });
      marker.addListener('mouseout', function() {
        marker.setIcon('/seeker.png');
      });
    };

    function renderList(data){
      container = $('#search-list').empty();
      $.each(data,function(i,data){
        var itemCt = i+1;
        // Create DOM
        var item = $('<div class="col-md-4 table-responsive" id="item_'+itemCt+'" >').addClass('search-item'),
          header = $('<h2>'),
          addr = $('<p>'),
          link = $('<a>');
        link.attr('href','http://localhost:3333/search').text(itemCt + ') ' + data.name).appendTo(header);
        addr.text(data.address);
        item.append(header,addr); // Append the infos to the item
        item.appendTo(container); // Append the item to the container
      });
      // spread it 3 items per row
      var divs = $("#search-list > div");
      for(var i = 0; i < divs.length; i+=3) {
        divs.slice(i, i+3).wrapAll("<div class='row'></div>");
      };
    };

    function deleteMarkers() {
      for (var i = 0; i < markers.length; i++) {
          markers[i].setMap(null);
      }
      markers = [];
    };

    function getAddress(lat, lng, map, marker, infowindow) {
      var latlng = new google.maps.LatLng(lat, lng);
      var geocoder = new google.maps.Geocoder();
      geocoder.geocode({ 'latLng': latlng }, function (results, status) {
          if (status == google.maps.GeocoderStatus.OK) {
              geo_address = results[0].formatted_address;
              $("#input_address").val(geo_address);
              $("#input_latitude").val(lat);
              $("#input_longitude").val(lng);
              infoWindowContentDrag(map, marker, infowindow, results[0].place_id);
              submitSearch();
          };
      });
    };

    function getGeo(lat, lng, map, marker, infowindow, callback) {
      var latlng = new google.maps.LatLng(lat, lng);
      var geocoder = new google.maps.Geocoder();
      geocoder.geocode({ 'latLng': latlng }, function (results, status) {
          if (status == google.maps.GeocoderStatus.OK) {
              placeid = results[0].place_id;
              address = results[0].formatted_address;
              var geo_result = [];
              geo_result['lat'] = lat;
              geo_result['lng'] = lng;
              geo_result['map'] = map;
              geo_result['marker'] = marker;
              geo_result['infowindow'] = infowindow;
              geo_result['placeid'] = placeid;
              geo_result['address'] = address;
              callback(geo_result);
          };
      });
    };

    $(document).on("mouseover", ".search-item",function() {
      row = this.id.split('_');
      row_ct = parseInt(row[1]);
      row_minus = parseInt(row[1])-1;
      markers[row_minus].setIcon('/teacher_light.png');
      $('#item_'+row_ct).addClass('search-item-highlite');
    });

    $(document).on("mouseout", ".search-item",function() {
      row = this.id.split('_');
      row_ct = parseInt(row[1]);
      row_minus = parseInt(row[1])-1;
      markers[row_minus].setIcon('/teacher.png');
      $('#item_'+row_ct).removeClass('search-item-highlite');
    });
  </script>

  <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAsCilLl4Pts-_BVVKJLoR_PCC7OmQsRcA&callback=initMap&libraries=places"></script>

  <!-- 1) after drag Organizer infowindow requires Seeker infowindow to click first
       2) sql needs to be ordered by distance -->